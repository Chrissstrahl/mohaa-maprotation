//MAPROTATION SCRIPT for MOHAA BT - CHRISSSTRAHL 25.05.2023
//Contains code from the HaZardModding COOP MOD for MOHAA War Chest
//
//THIS SCRIPT ROTATES EACH MAP IN THE LIST THE GIVEN AMMOUNT OF CYCLES BEFORE IT CONTINUES TO THE NEXT MAP
//TESTERS: PROtoes

//See example file:						/maprotation/stalingrad.scr
//maplist scripts go in folder:			/maprotation/
//DEFAULT LIST SPECIFIED IN:			level.maprotate_listDefault
//if you specify a maplist-file name with a path you can basically execute any script at any location

//NOTICE
//- To accsess entities you will always have your code after, this even if it gives you a warning, keep it in your script:
//level waittill prespawn
//- $world might be NULL between mapchanges or restart, you are required to check
//- level.time uses realtime, so when reloading a level it might advance/skip ahead much faster than you would expect it to do

//IGNORE any errors like that, in any other script, they are bound to happen do not try to fix them can break the scripts:
//	level waittill prespawn (xyz.scr, 69)
//	level ^
//
//^~^~^ Script Error: invalid waittill prespawn for 'Level'

//=========================================================================
//USED CVARS and level. vars
//=========================================================================
// NEW:
// - mrt_mapLast	- remembers last map											(do not modify)
// - mrt_mapCount	- remembers how many cycles this map was active					(do not modify)
// - mrt_listPos	- remembers the current map position in teh list				(do not modify)
// - mrt_listLast	- remembers the name of the last list, to detect list changes	(do not modify)
//
// - mrt_list		- Specifies the list filename or path to use					Accepts strings
// - mrt_random		- Set to 1 to randomize the list								Accepts 0 or 1
//=========================================================================
// EXISTING:
// - sv_maplist
// - mapname
// - nextmap
//=========================================================================
// NEW LEVEL VARS:
// - level.maprotate_nextMap
// - level.maprotate_mapList
// - level.maprotate_listDefault
// - level.maprotate_started


//THE SCRIPT SHOULD BE STARTED HERE from 
//=========================================================================
main:{
//=========================================================================
//=========================================================================
	//wait until the level is ready or it goes boom
	level waittill prespawn
	wait 2
	
	//don't run twiche
	if(level.maprotate_started != NIL){	end	}
	level.maprotate_started = 1
	
	//EDIT HERE YOUR DEFAULT START LIST
	level.maprotate_listDefault = "maprotation/stalingrad.scr"
	
	//GRAB DATA - current map and maplist
	local.mapCurrent = getCvar("mapname")
	local.mapListName = getCvar("mrt_list")
	
	//clean mapname of any special parameters
	local.mapCurrent = waitthread getCleanMapname local.mapCurrent
	
	//run script only in Multiplayer
	if(int(getCvar("g_gametype")) <= 0){
		//iii !NFO iii
		println("(i) MAPROTATION: =X= SCRIPT TERMINATED - Meant for Multiplayer only =X=")
		end
	}
	
	//SET DELAY, can be used to fix issues with players getting disconnected or crashing
	//waits until 5 secounds on this level have passed since the script was executed
	local.timeOffset = level.time
	while(level.time < (local.timeOffset + 5)){ wait 1 }
	
	//@@@ DEBUG @@@
	//println("(i) MAPROTATION: =!= STARTED on '"+local.mapCurrent+"'")

	//populate variables we need
	level.maprotate_nextMap	= ""
	
	//grab maplist
	local.mapListData = NIL
	local.mapListNameCvar = getCvar("mrt_list")
	local.mapListName = local.mapListNameCvar
	
	//fallback to the default list if cvar 'mrt_list' is empty
	if(local.mapListName == ""){
		local.mapListName = level.maprotate_listDefault
		
		//iii !NFO iii
		//println("(i) MAPROTATION: Cvar mrt_list sets name of the list to use")
	}
	
	//a custom path is given
	if(waitthread containsText local.mapListName "/"){ local.mapListName = (local.mapListName) }
	else{ local.mapListName = ("maprotation/"+local.mapListName) }
	
	//if the list path is missing '.scr' do add it
	if(!waitthread containsText local.mapListName ".scr"){ local.mapListName = (local.mapListName+".scr") }
	
	//execute the list script to grab the array
	local.mapListData = waitexec (local.mapListName)
	
	//execution of script failed, fall back to default
	if(!local.mapListName || !local.mapListData){
		local.mapListName = level.maprotate_listDefault
		local.mapListData = waitexec (local.mapListName)
		if(!local.mapListData){
			error ("FATAL ERROR ::mapsLists file ["+local.mapListName+"] could not be found or is faulty!") 999
			end			
		}
		else{
			//iii !NFO iii
			println("(i) MAPROTATION: Bad/Missing or faulty maplist in cvar 'mrt_list': "+local.mapListNameCvar)
			println("(i) MAPROTATION: Did fallback to default list")
		}
	}
	
	//iii !NFO iii
	println("(i) MAPROTATION: Using list: "+local.mapListName+". mrt_list CVAR value is:'"+local.mapListNameCvar+"'")

	//make list avialable to the scripts
	level.maprotate_mapList	= local.mapListData
	
	//verify maplist
	waitthread mapListVerify level.maprotate_mapList
	
	//generate random list
	waitthread mapListCreateRandomList level.maprotate_mapList
	
	//decide what we need to do for rotation
	thread mapRotation local.mapListName
}end


//decides what to do, load next map or set next map
//=========================================================================
mapRotation local.mapListName:{
//=========================================================================
	local.mapLast			= getCvar("mrt_mapLast")
	local.listLast			= getCvar("mrt_listLast")
	local.mapCurrent		= getCvar("mapname")
	local.curPos			= getCvar("mrt_listPos")
	local.mapCycles			= int(getCvar("mrt_mapCount"))
	local.randomRotation	= getCvar("mrt_random")
	local.mapRotateListSize = level.maprotate_mapList.size
	
	if(local.randomRotation == "" || int(local.randomRotation) < 1){ local.randomRotation = 0 }
	else{ local.randomRotation = 1}
	
	//clean mapname of any special parameters
	local.mapCurrent = waitthread getCleanMapname local.mapCurrent
	
	local.mapNext			= local.mapCurrent
	
	//update last map data
	setCvar "mrt_mapLast" local.mapCurrent

	//check if last map is empty or curPos is empty
	if(local.mapLast == "" || local.curPos == "" || local.listLast != local.mapListName){
		thread mapRotation_firstRun local.mapCurrent local.mapListName local.randomRotation
		end
	}
	
	//convert into integer
	local.curPos = int(local.curPos)
	
	//if map has changed, restart cycles
	if(local.mapLast != local.mapCurrent){
		local.mapCycles = 0
	}
	
	//always up the cycle by 1
	local.mapCycles++
	
	//update cvar that remembers how often a level was loadad in a row
	setCvar "mrt_mapCount" local.mapCycles
	
	//NOT RANDOM MAP, mrt_random is NOT active
	if(!local.randomRotation){		
		//if map has changed, restart cycles
		if(local.mapLast != local.mapCurrent){
			local.curPos++
		}	
		
		//make sure we don't go below
		if(!local.curPos){ local.curPos = 1 }
		
		//reached end of list
		if( local.curPos >= level.maprotate_mapList.size ){
			//iii !NFO iii
			println("(i) MAPROTATION: Reached end of list")
		
			//update list position
			setCvar "mrt_listPos" "0"	
		}else{
			//update list position
			setCvar "mrt_listPos" (""+local.curPos)	
		}
	}
	//RANDOM MAP, mrt_random is active
	else{
		//reset list position
		setCvar "mrt_listPos" "0"	
	
		//getpos of map in randomlist
		local.curPos = waitthread mapGetPosInList local.mapCurrent
		
		//grab randomlist size
		while($world == NULL){ waitframe }
		local.mapRotateListSize = $world.flags["mrt_rnd_size"]
	}
	
	//grab cycles for the current map
	local.mapCyclesAllowed = waitthread mapGetCyclesFromList local.curPos local.randomRotation
	
	//iii !NFO iii
	println("(i) MAPROTATION: Map at pos "+local.curPos+" of "+local.mapRotateListSize+" in List, "+local.mapCycles+" cycles of "+local.mapCyclesAllowed+": "+local.mapCurrent)
	
	//cycles exceeded
	if(local.mapCycles > local.mapCyclesAllowed){
		thread mapRotation_cyclesExceeded local.curPos local.mapCycles local.mapCyclesAllowed
		end
	}
	
	//cycle limit hit exactly
	if(local.mapCycles == local.mapCyclesAllowed){
		local.mapNext = waitthread mapGetNextFromList local.curPos	
	}
	
	//set next map to load when level ends
	waitthread setNextMap local.mapNext	
}end


//=========================================================================
mapRotation_firstRun local.mapCurrent local.mapListName local.randomRotation:{
//=========================================================================
	local.mapRotateListSize = level.maprotate_mapList.size

	//iii !NFO iii
	println("(i) MAPROTATION: First Run - Server Restarted or List was changed!")
	
	//update last list in use
	setCvar "mrt_listLast" (local.mapListName)
	
	local.mapNext	= local.mapCurrent
	local.curPos	= 1
	
	//if random map rotations is not active
	if(local.randomRotation < 1){
		//if current map is not the start map, force loading the start map
		if( level.maprotate_mapList[1][1] != local.mapCurrent){
			//iii !NFO iii
			println("(i) MAPROTATION: Current map is not start map, changing now")
			
			//update list position
			setCvar "mrt_listPos" "0"
			
			//force the start map now
			local.mapNext = level.maprotate_mapList[1][1]
			thread mapForceChange local.mapNext
			end
		}
	}
	//random map rotation is active, and we need to figure out which position this map is in
	else{
		//getpos of map in randomlist
		local.curPos = waitthread mapGetPosInList local.mapCurrent
		
		//grab randomlist size
		while($world == NULL){ waitframe }
		local.mapRotateListSize = $world.flags["mrt_rnd_size"]
		
		//oh no - this map is not on the list
		if(local.curPos < 1){
			//iii !NFO iii
			println("(i) MAPROTATION: Current map is not in the maplist, changing now")
			
			//update list position
			setCvar "mrt_listPos" "0"
			
			//force a random next map now
			local.mapNext = waitthread mapGetNextFromList 0
			thread mapForceChange local.mapNext
			end
		}
	}
	
	//update cvar that remembers how often a level was loadad in a row
	setCvar "mrt_mapCount" "1"
	
	//okay, so where we arrive only if:
	//- current map is the start map --> OR <-- random is active and current map is in the maplist
	//grab then the cycles this map should be doing
	local.mapCyclesAllowed = waitthread mapGetCyclesFromList local.curPos local.randomRotation
	
	//iii !NFO iii
	println("(i) MAPROTATION: Map at pos "+local.curPos+" of "+local.mapRotateListSize+" in List, 1 cycles of "+local.mapCyclesAllowed+": "+local.mapCurrent)
	
	//update list position
	setCvar "mrt_listPos" "1"
	
	//if the current level has less than 2 cycles, grab next map from list and overwrite the current map in the var
	if(local.mapCyclesAllowed < 2){
		//current map is start map - set next map to load after this map has finished
		local.mapNext = waitthread mapGetNextFromList 1
	}
	
	waitthread setNextMap local.mapNext	
}end


//=========================================================================
mapRotation_cyclesExceeded local.curPos local.mapCycles local.mapCyclesAllowed:{
//=========================================================================
	//iii !NFO iii
	println("(i) MAPROTATION: Map ["+local.mapCycles+"] exceeded Cycles ["+local.mapCyclesAllowed+"], forceing next map")
	
	//force the next map now
	local.mapNext = waitthread mapGetNextFromList local.curPos
	thread mapForceChange local.mapNext
}end


//=========================================================================
mapListVerify local.array:{
//=========================================================================
	//make sure this list works - if not create error message
	if(!local.array || local.array.size < 1){
		error ("FATAL ERROR ::mapsLists is not populated or faulty!") 999
	}else{
		local.activeMaps = 0
		
		local.mapLastName = ""
		
		//iterate the array to check if it is A-OK
		for(local.i = 1; local.i <= local.array.size; local.i++){
			local.mapName  = local.array[local.i][1]
			local.mapCycles  = local.array[local.i][2]
			
			//abbort if we have a empty mapname
			if(local.mapName == ""){
				error ("FATAL ERROR ::mapsLists mapname at pos "+local.i+" was empty!") 999
				end
			}
			
			//abbort if we have a empty value for cycles
			if(local.mapCycles == NIL || local.mapCycles == "" || int(local.mapCycles) < 0 || int(local.mapCycles) > 999){
				error ("FATAL ERROR [OUT OF RANGE: 0-999]::mapsLists cycles for "+local.mapName+" at pos "+local.i+" is invalid: "+local.mapCycles) 999
				end
			}
			
			//count the overall ammount of cycles
			if(int(local.mapCycles) > 0){
				local.activeMaps++;
				
				//two maps with the same name in a row
				if(local.mapLastName == local.mapName){
					error ("FATAL ERROR ::mapsLists Two maps with the same name in row!") 999
					end
				}
				
				local.mapLastName = local.mapName
			}
		}
		//abbort if not at least two maps have cycles (are active)
		if(local.activeMaps < 2){
			error ("FATAL ERROR ::mapsLists NEEDS at least two active maps in it with different names!") 999
			end
		}
		
		//we need the start map to be valid
		if(int(local.array[1][2]) < 1){
			error ("FATAL ERROR ::mapsLists the first map in the list needs to have at least 1 cycle!") 999
			end
		}
	}
}end


//generates a list based on the supplied maplist BUT:
// - each mapname will be present only once
// - only active maps with at least 1 cycle are added
//=========================================================================
mapListCreateRandomList local.mapList:{
//=========================================================================
	local.mapCycles		= 0
	local.mapsAdded		= 0
	
	//generate the random list only for maps that have more than ZERO cycles
	for(local.i=1;local.i<=local.mapList.size;local.i++){
		local.mapCycles = int(local.mapList[ local.i ][2])
		if(local.mapCycles > 0){
			local.mapsAdded += waitthread mapAddToRandomList local.mapList[ local.i ][1] local.mapCycles
		}
	}

	//@@@ DEBUG @@@
	//println("(i) MAPROTATION: Added ["+local.mapsAdded+"] uniqe Maps to Random List")
}end


//returns the number of cycles for the map at the given location in the list
//=========================================================================
mapGetCyclesFromList local.mapPosInList local.randomRotation:{
//=========================================================================
	//verify that there is a value in parameter 1
	if(local.mapPosInList == NIL){
		error ("FATAL ERROR ::mapGetCyclesFromList Parameter 1 was empty!") 999
		end 0	
	}
	
	local.mapCycles = 0
	
	//grab mapname and cycles
	if(!local.randomRotation){
		//verify parameter 1
		if(local.mapPosInList < 1 || local.mapPosInList > level.maprotate_mapList.size){
			local.mapPosInList = 1
		}
	
		//@@@ DEBUG @@@
		local.mapName = level.maprotate_mapList[local.mapPosInList][1]
		
		local.mapCycles = int(level.maprotate_mapList[ local.mapPosInList ][2])
	}
	//grab from the random list
	else{
		//wait for the level to be ready
		while($world == NULL){ waitframe }
		
		//verify parameter 1
		if(local.mapPosInList < 1 || local.mapPosInList > $world.flags["mrt_rnd_size"]){
			local.mapPosInList = 1
		}
		
		//@@@ DEBUG @@@
		local.mapName =  $world.flags[("mrt_rnd"+local.mapPosInList)]
		
		local.mapCycles = $world.flags[("mrt_rnd"+local.mapPosInList+"_cycles")]
	}
	
	//@@@ DEBUG @@@
	//println ("(i) MAPROTATION: RETURNING: "+local.mapName+" at pos["+local.mapPosInList+"] cycles["+local.mapCycles+"]")
}end local.mapCycles


//checks if the given map is already in the random list
//=========================================================================
mapIsInRandomList local.mapName:{
//=========================================================================
	if(!local.mapName){
		error ("FATAL ERROR ::mapIsInRandomList Parameter 1 was empty!") 999
		end 0
	}
	
	//wait for the level to be ready
	while($world == NULL){ waitframe }
	
	//check the random list
	for(local.i=1;local.i<=level.maprotate_mapList.size;local.i++){
		local.mapnameInList = $world.flags[("mrt_rnd"+local.i)]
		if(local.mapnameInList != NIL && local.mapName == local.mapnameInList){
			end 1
		}
	}
}end 0


//checks if the given map is in the maplist list and returns the first position the given mapname is found at
//if local.startingPos is specified the check will start from there
//=========================================================================
mapGetPosInList local.mapName local.startingPos:{
//=========================================================================
	if(!local.mapName){
		error ("FATAL ERROR ::mapGetPosInList Parameter 1 was empty!") 999
		end 0
	}
	
	//a start position is given
	if(local.startingPos != NIL){
		local.startingPos = int(local.startingPos)
		
		//the start position is out of bounds
		if(local.startingPos < 1 || local.startingPos > level.maprotate_mapList.size ){
			error ("FATAL ERROR ::mapGetPosInList Parameter 2 ["+local.startingPos+"] out of range: [1]-["+level.maprotate_mapList.size+"]!") 999
			end 0
		}
	}
	//no start pos is given, just start at !!1
	else{
		local.startingPos = 1
	}
	
	//grab random list cvar setting
	local.randomRotation	= getCvar("mrt_random")
	
	//grab from normal maplist
	if(local.randomRotation == "" || int(local.randomRotation) < 1 ){
		for(local.i=local.startingPos;local.i<=level.maprotate_mapList.size;local.i++){
			if(local.mapName == level.maprotate_mapList[ local.i ][1]){
				end local.i
			}
		}
	}
	//grab Random maplist - ignores starting pos, because each map is only once in the list
	else{
		//wait for the level to be ready
		while($world == NULL){ waitframe }
	
		local.mapListRandomSize = $world.flags["mrt_rnd_size"]
		for(local.i=1;local.i<=local.mapListRandomSize;local.i++){
			if(local.mapName == $world.flags[("mrt_rnd"+local.i)]){
				end local.i
			}
		}
	}
}end 0


//checks if the given map is already in the random list
//=========================================================================
mapAddToRandomList local.mapName local.mapCycles:{
//=========================================================================
	if(!local.mapName){
		error ("FATAL ERROR ::mapAddToRandomList Parameter 1 was empty!") 999
		end 0
	}
	
	//map already in list, don't add it, just exit here
	if(waitthread mapIsInRandomList local.mapName){
		//@@@ DEBUG @@@
		//println ("(i) MAPROTATION: ::mapAddToRandomList NOT added: "+local.mapName)
		
		end 0
	}
	
	//wait for the level to be ready
	while($world == NULL){ waitframe }
	
	//add mapname to random list
	for(local.i=1;local.i<=level.maprotate_mapList.size;local.i++){
		local.mapNameInList = string($world.flags[("mrt_rnd"+local.i)])
		
		//@@@ DEBUG @@@
		//println ("(i) MAPROTATION: ::mapAddToRandomList local.mapNameInList: "+local.mapNameInList)
		
		//found empty slot, add to list, also update the size info
		if( local.mapNameInList == "NIL" || local.mapNameInList == ""){
			//@@@ DEBUG @@@
			//println ("(i) MAPROTATION: ::mapAddToRandomList added: "+local.mapName)
			
			$world.flags[("mrt_rnd"+local.i)] = local.mapName
			$world.flags[("mrt_rnd"+local.i+"_cycles")] = local.mapCycles
			$world.flags["mrt_rnd_size"] = local.i
			end 1
		}
	}
	//exceeded map entries - this should never be happening
	error ("FATAL ERROR ::mapAddToRandomList EXCEEDED MAX ENTRIES!") 999
}end 0


//grabs random map from the list - avoids grabbing the same map
//=========================================================================
mapGetRandomFromList:{
//=========================================================================
	//wait for the level to be ready
	while($world == NULL){ waitframe }

	//pick random map, and check if it is active/has at last 1 cycle
	local.randomListSize	= $world.flags["mrt_rnd_size"]
	
	local.mapCurrent		= getCvar("mapname")
	
	//clean mapname of any special parameters
	local.mapCurrent = waitthread getCleanMapname local.mapCurrent
	
	local.mapName			= local.mapCurrent
	
	//try until we have a map that is not the same
	while(local.mapName == local.mapCurrent){
		local.randomNum = ( randomint(local.randomListSize) + 1)
		if(local.randomNum > local.randomListSize){
			local.randomNum = 1
		}
		local.mapName = $world.flags[("mrt_rnd"+local.randomNum)]
	}

	//@@@ DEBUG @@@
	println("(i) MAPROTATION: ::mapGetRandomFromList, selected["+local.randomNum+"] randomly: "+local.mapName)
}end local.mapName


//grabs next map from the list
//=========================================================================
mapGetNextFromList local.mapPosInList:{
//=========================================================================
	//wait for the level to be ready
	while($world == NULL){ waitframe }

	local.mapName			= getCvar("mapname")
	
	//clean mapname of any special parameters
	local.mapName = waitthread getCleanMapname local.mapName
	
	local.randomRotation	= getCvar("mrt_random")
	local.mapCycles			= 0
	local.randomListSize	= int($world.flags["mrt_rnd_size"])

	//verify that there is a value in parameter 1
	if( local.mapPosInList == NIL || local.mapPosInList == "" ){
		error ("FATAL ERROR ::mapGetNextFromList Parameter 1 was empty!") 999
		end local.mapName
	}
	
	//@@@ DEBUG @@@
	//println("(i) MAPROTATION: mapGetNextFromList pos: ["+local.mapPosInList+"]")
	
	//random map is enabled
	//make sure we have at lest 3 maps in the list or there is no point in random
	if(local.randomRotation != "" && int(local.randomRotation) > 0 && local.randomListSize > 2){
		println("(i) MAPROTATION: mrt_random is active selecting random map from list")
		local.mapName = waitthread mapGetRandomFromList
		end local.mapName
	}
	
	//verify parameter 1
	if(local.mapPosInList < 1){
		local.mapPosInList = 1
	}
	else if(local.mapPosInList > level.maprotate_mapList.size){
		local.mapPosInList = 0
	}
	
	//try to get a valid map, iterate the list if the next map has less than 1 wanted cycle
	local.rounds = 0
	while(local.mapCycles < 1 && local.rounds < level.maprotate_mapList.size){
		//failsave for the loop
		local.rounds++;
		
		//count 1 up
		local.mapPosInList++;
		
		//restart if we are at the end of the list
		if(local.mapPosInList > level.maprotate_mapList.size){
			//@@@ DEBUG @@@
			//println("(i) MAPROTATION: mapGetNextFromList at end of list")
			
			local.mapPosInList = 1;
		}	
		
		//grab cycles for this 
		local.mapCycles = waitthread mapGetCyclesFromList local.mapPosInList local.randomRotation
		
		//@@@ DEBUG @@@
		//println("(i) MAPROTATION: mapGetNextFromList c["+local.mapCycles+"] for pos ["+local.mapPosInList+"]")
	}

	//grab mapname from list
	local.mapName = level.maprotate_mapList[ local.mapPosInList ][1]
}end local.mapName


//sets the next map to load
//=========================================================================
setNextMap local.nxtMap:{
//=========================================================================
	if(!local.nxtMap){
		//iii !NFO iii
		println("(i) MAPROTATION: [setNextMap] =!= Given nextmap was empty! =!=")
	
		local.nxtMap = getCvar("mapname")
	}
	setcvar "sv_maplist" (local.nxtMap)
	setcvar "nextmap" (local.nxtMap)
	level.maprotate_nextMap = local.nxtMap
	
	//iii !NFO iii
	println("(i) MAPROTATION: NEXT MAP set to: "+level.maprotate_nextMap)
}end


//loads the given map now
//=========================================================================
mapForceChange local.mapName:{
//=========================================================================	
	//set next map to load
	waitthread setNextMap local.mapName
	
	//force level ending
	thread mapEndLevel	
}end


//ends the level
//=========================================================================
mapEndLevel:{
//=========================================================================	
	local.printMsgTime = 2
	local.loadDelayTime = 16
	
	while(local.loadDelayTime > 0){
		local.Msg3 = ("( i ) Maprotation: Loading ("+level.maprotate_nextMap+") in: "+(local.loadDelayTime))
		iprintln_noloc local.Msg3
		println local.Msg3
		local.loadDelayTime = ( local.loadDelayTime - local.printMsgTime) 
		println ("lvl time: "+level.time)
		wait 2
	}
	
	//spawn and activate trigger to end match
	local.levelEndTrigger = spawn "trigger_changelevel" "map" (level.maprotate_nextMap)
	waitframe
	trigger local.levelEndTrigger
}end


//used to help with printouts of debug messages
//=========================================================================
printDebugMessage local.dMsg:{
//=========================================================================
	if(!local.dMsg){
		error ("FATAL ERROR ::waitthread printDebugMessage EMPTY Message given!") 999
	}
	//iprintln_noloc local.dMsg
	//if($player[1]){ $player[1] iprint local.dMsg 1 }
	println ("@@@ "+local.dMsg)
}end


//TAKEN FROM THE HaZardModding COOP MOD for MOHAA War Chest
//checks if a string contains the given text
//[202] chrissstrahl - returning now starting position of where string was found if instructed to do so
//=========================================================================
containsText local.source local.text local.giveStartPos:{
//=========================================================================
	if(local.source == NIL || local.text == NIL || local.source.size < local.text.size){ end 0 }

	local.index = 0
	local.matchStartsAt = 0 //[202]
	for(local.i=0;local.i<local.source.size;local.i++){
		//part of match found
		if(local.source[local.i] == local.text[local.index]){
			local.index++
			if(local.matchStartsAt == 0){ //[202]
				local.matchStartsAt = local.i
			}
			//complete match found
			if(local.index == local.text.size){
				if(local.giveStartPos){ //[202]
					end local.matchStartsAt
				}
				end 1
			}
		}else{
			local.index = 0
			local.matchStartsAt = 0 //[202]
		}
	}
}end 0


//TAKEN FROM THE HaZardModding COOP MOD for MOHAA War Chest
//[202] chrissstrahl - cleans the mapname of savepoints ($...) and returns it
//=========================================================================
getCleanMapname local.dirtyName:{
//=========================================================================
	local.fullMapName = string(local.dirtyName)
	local.cleanName = ""
	for(local.current = 0; local.current < local.fullMapName.size;local.current++){
		if(local.fullMapName[local.current] == "$"){ break }
		local.cleanName += local.fullMapName[local.current]
	}
}end local.cleanName












